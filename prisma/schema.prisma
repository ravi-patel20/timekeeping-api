generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id                       String        @id @default(uuid())
  code                     String        @unique
  email                    String
  billingEmail             String?
  phone                    String?
  name                     String?
  addressLine1             String?
  addressLine2             String?
  city                     String?
  stateProvince            String?
  postalCode               String?
  country                  String?
  timezone                 String        @default("UTC")
  propertyType             PropertyType?
  logoUrl                  String?
  notes                    String?
  isActive                 Boolean       @default(true)
  primaryContactEmployeeId String?
  createdAt                DateTime      @default(now())
  employees                Employee[]    @relation("PropertyEmployees")
  primaryContact           Employee?     @relation("PropertyPrimaryContact", fields: [primaryContactEmployeeId], references: [id], onDelete: SetNull)
  magicLinks               MagicLink[]
  modules                  PropertyModule[]

  @@index([primaryContactEmployeeId])
}

model MagicLink {
  id         String   @id @default(uuid())
  token      String   @unique
  deviceId   String
  verified   Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Employee {
  id                String               @id @default(uuid())
  passcodeHash      String               @map("passcode")
  propertyId        String
  isAdmin           Boolean              @default(false)
  email             String?
  payType           String               @default("hourly")
  phone             String?
  status            String               @default("active")
  firstName         String
  lastName          String
  payAmountCents    Int?
  clockLogs         ClockLog[]
  property          Property             @relation("PropertyEmployees", fields: [propertyId], references: [id])
  payHistory        EmployeePayHistory[]
  primaryContactFor Property[]           @relation("PropertyPrimaryContact")
  modules           EmployeeModule[]

  @@index([propertyId])
}

model ClockLog {
  id         String    @id @default(uuid())
  type       ClockType
  timestamp  DateTime  @default(now())
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
}

model DeviceSession {
  id         String   @id @default(uuid())
  token      String   @unique
  deviceId   String
  propertyId String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model EmployeePayHistory {
  id          String   @id @default(uuid())
  employeeId  String
  amountCents Int?
  payType     String?
  effectiveAt DateTime @default(now())
  createdAt   DateTime @default(now())
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId, effectiveAt])
}

model AdminSession {
  id         String   @id @default(uuid())
  token      String   @unique
  propertyId String
  employeeId String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model PropertyModule {
  id         String    @id @default(uuid())
  propertyId String
  moduleKey  String
  createdAt  DateTime  @default(now())
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, moduleKey])
}

model EmployeeModule {
  id         String    @id @default(uuid())
  employeeId String
  moduleKey  String
  createdAt  DateTime  @default(now())
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, moduleKey])
}

enum ClockType {
  IN
  OUT
}

enum PropertyType {
  HOTEL
  RESORT
  RESTAURANT
  BAR
  OTHER
}
